// <auto-generated />
using System;
using AskMe.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AskMe.Migrations
{
    [DbContext(typeof(Data_Context))]
    partial class Data_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AskMe.Context.Entities.Question", b =>
                {
                    b.Property<int>("Id_Question")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Question"), 1L, 1);

                    b.Property<int?>("AnonymouseQuestion")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("From_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ThreadId_Question")
                        .HasColumnType("int");

                    b.Property<int>("To_ID")
                        .HasColumnType("int");

                    b.HasKey("Id_Question");

                    b.HasIndex("From_ID");

                    b.HasIndex("ThreadId_Question");

                    b.HasIndex("To_ID");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("AskMe.Context.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Unkown")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AskMe.Context.Entities.Question", b =>
                {
                    b.HasOne("AskMe.Context.Entities.UserAccount", "FromUser")
                        .WithMany("Question_From")
                        .HasForeignKey("From_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AskMe.Context.Entities.Question", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId_Question");

                    b.HasOne("AskMe.Context.Entities.UserAccount", "ToUser")
                        .WithMany("Question_To")
                        .HasForeignKey("To_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Thread");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("AskMe.Context.Entities.UserAccount", b =>
                {
                    b.Navigation("Question_From");

                    b.Navigation("Question_To");
                });
#pragma warning restore 612, 618
        }
    }
}
